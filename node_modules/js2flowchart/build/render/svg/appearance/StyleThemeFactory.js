var _Themes;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { mergeObjectStructures } from 'shared/utils/composition';
import DEFAULT, { buildTheme } from './themes/DefaultBaseTheme';
import BLACK_AND_WHITE from './themes/BlackAndWhite';
import BLURRED from './themes/Blurred';
import LIGHT from './themes/Light';
var ThemeNamesMap = {
  DEFAULT: 'DEFAULT',
  BLACK_AND_WHITE: 'BLACK_AND_WHITE',
  BLURRED: 'BLURRED',
  LIGHT: 'LIGHT'
};
export var Themes = (_Themes = {}, _defineProperty(_Themes, ThemeNamesMap.DEFAULT, DEFAULT), _defineProperty(_Themes, ThemeNamesMap.BLACK_AND_WHITE, BLACK_AND_WHITE), _defineProperty(_Themes, ThemeNamesMap.BLURRED, BLURRED), _defineProperty(_Themes, ThemeNamesMap.LIGHT, LIGHT), _Themes);
export var getTheme = function getTheme(themeName) {
  if (!Themes[themeName] === themeName === ThemeNamesMap.DEFAULT) {
    return Themes.DEFAULT;
  }

  return applyStyleToTheme(DEFAULT, Themes[themeName]);
};
export var getDefaultTheme = function getDefaultTheme() {
  return getTheme(ThemeNamesMap.DEFAULT);
};
export var getBlackAndWhiteTheme = function getBlackAndWhiteTheme() {
  return getTheme(ThemeNamesMap.BLACK_AND_WHITE);
};
export var getBlurredTheme = function getBlurredTheme() {
  return getTheme(ThemeNamesMap.BLURRED);
};
export var getLightTheme = function getLightTheme() {
  return getTheme(ThemeNamesMap.LIGHT);
};
export var applyStyleToTheme = function applyStyleToTheme(theme, styles) {
  return mergeObjectStructures(theme, styles);
};
export var buildColorsBasedTheme = function buildColorsBasedTheme(colors) {
  return buildTheme(colors);
};