function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { getRectangle, getLine } from 'shared/utils/svgPrimitives';
import { assignState } from 'shared/utils/composition';
import { setupBasicBehaviour, setupInitialProperties, setupInitialSelectors, calculateHeight, calculateNameBasedWidth, calculatePosition, delegateInit } from './BaseShape';
var ENTITY_FIELD_NAME = 'VerticalEdgedRectangle';

var setupVerticalEdgedRectangleBehavior = function setupVerticalEdgedRectangleBehavior(state) {
  return {
    print: function print(config) {
      var theme = state.theme;
      var _state$position = state.position,
          x = _state$position.x,
          y = _state$position.y,
          _state$dimensions = state.dimensions,
          w = _state$dimensions.w,
          h = _state$dimensions.h,
          namePosition = {
        x: x + theme.edgeOffset,
        y: y
      };
      return "\n            <g>\n                ".concat(getRectangle(x, y, w, h, theme), "\n                    \n                ").concat(getLine(x + theme.edgeOffset, y, x + theme.edgeOffset, y + h, theme), "\n                ").concat(getLine(x + w - theme.edgeOffset, y, x + w - theme.edgeOffset, y + h, theme), "\n             \n                ").concat(this.printName(namePosition), "\n                ").concat(this.printDebugInfo(config), "\n            </g>");
    }
  };
};

var calculateWidth = function calculateWidth(state) {
  return 2 * (state.theme.horizontalPadding + state.theme.edgeOffset) + calculateNameBasedWidth(state);
};

var calculateDimensions = function calculateDimensions(state) {
  return {
    w: calculateWidth(state),
    h: calculateHeight(state)
  };
};

var extractBasicState = function extractBasicState(state) {
  return _objectSpread({}, state, {
    position: calculatePosition(state),
    dimensions: calculateDimensions(state)
  });
};

export var VerticalEdgedRectangle = function VerticalEdgedRectangle(initialState) {
  var state = extractBasicState(initialState);
  state = _objectSpread({}, state, {}, setupInitialProperties(state));
  return assignState(state, [setupInitialSelectors, setupBasicBehaviour, setupVerticalEdgedRectangleBehavior]);
};
export default delegateInit(VerticalEdgedRectangle, ENTITY_FIELD_NAME);