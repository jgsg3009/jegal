function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as babelParser from '@babel/parser';
import { mergeObjectStructures } from 'shared/utils/composition';
import { TOKEN_KEYS } from 'shared/constants';
import { setupPointer } from 'shared/utils/treeLevelsPointer';
import { logError } from 'shared/utils/logger';
import defaultAstConfig from './astParserConfig';
export var parseCodeToAST = function parseCodeToAST(code) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var ast = [];

  try {
    ast = babelParser.parse(code, mergeObjectStructures(defaultAstConfig, config));
  } catch (e) {
    logError('Error at parseCodeToAST: ' + e.message, e.loc, e.stack);
    throw e;
  }

  return ast;
};
export var buildVisitor = function buildVisitor(_ref, treeNodesDestination) {
  var definitionsMap = _ref.definitionsMap,
      globalIgnore = _ref.globalIgnore;

  var pointer = setupPointer(treeNodesDestination),
      wrapByGlobalIgnore = function wrapByGlobalIgnore(visit) {
    return function (path) {
      return visit(path, globalIgnore);
    };
  };

  return definitionsMap.reduce(function (acc, item) {
    if (!item.body) {
      acc[item.type] = item.reversed ? {
        exit: wrapByGlobalIgnore(visitSimpleEntry(item, pointer))
      } : wrapByGlobalIgnore(visitSimpleEntry(item, pointer));
    } else {
      acc[item.type] = {
        enter: wrapByGlobalIgnore(enterComplexEntry(item, pointer)),
        exit: wrapByGlobalIgnore(exitComplexEntry(item, pointer))
      };
    }

    return acc;
  }, {});
}; //TODO: refactor, looks a bit duplicated

var visitSimpleEntry = function visitSimpleEntry(item, pointer) {
  return function (path, globalIgnore) {
    if (item.ignore && item.ignore(path)) return;

    var entryConfig = _objectSpread({}, getBasicEntryConfig(item, path));

    if (globalIgnore && globalIgnore(entryConfig)) return;
    pushEntry(pointer, entryConfig);
  };
};

var enterComplexEntry = function enterComplexEntry(item, pointer) {
  return function (path, globalIgnore) {
    if (item.ignore && item.ignore(path)) return;
    var entryConfig = pushComplexEntry(item, pointer, path, globalIgnore);
    pointer.stepIn(entryConfig);
  };
};

var pushComplexEntry = function pushComplexEntry(item, pointer, path, globalIgnore) {
  var entryConfig = _objectSpread({}, getBasicEntryConfig(item, path), {
    body: []
  });

  if (!(globalIgnore && globalIgnore(entryConfig))) {
    pushEntry(pointer, entryConfig);
  }

  return entryConfig;
};

var pushEntry = function pushEntry(pointer, entry) {
  var parent = pointer.getCurrent();
  entry.parent = parent;
  (parent.body || parent).push(entry);
};

var getStatementParentKey = function getStatementParentKey(path) {
  var statementParent = path.find(function (path) {
    return path.parentKey === TOKEN_KEYS.PROGRAM || path.isStatementOrBlock();
  }) || {};
  return statementParent.key;
};

var exitComplexEntry = function exitComplexEntry(item, pointer) {
  return function (path) {
    if (item.ignore && item.ignore(path)) return;
    pointer.stepOut();
  };
};

var getBasicEntryConfig = function getBasicEntryConfig(item, path) {
  var name = item.getName(path),
      nameOptions = typeof name === 'string' ? {
    name: name
  } : name;

  var config = _objectSpread({}, nameOptions, {
    type: item.type,
    key: getStatementParentKey(path),
    isBodyEntry: path.key === TOKEN_KEYS.BODY
  });

  if (!config.name) {
    config.name = '';
  }

  if (item.type !== path.node.type) {
    config.subType = path.node.type;
  }

  return config;
};