function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

import { TOKEN_TYPES } from 'shared/constants';
import { DefinitionsList } from './entryDefinitionsMap';
import { getFunctionDependenciesLevel } from './abstraction-levels/functionDependencies';
import { getFunctionsLevel } from './abstraction-levels/functions';
export var ABSTRACTION_LEVELS = {
  FUNCTION: getFunctionsLevel(),
  FUNCTION_DEPENDENCIES: getFunctionDependenciesLevel(),
  CLASS: [TOKEN_TYPES.CLASS_DECLARATION],
  IMPORT: [TOKEN_TYPES.IMPORT_DECLARATION, TOKEN_TYPES.IMPORT_SPECIFIER, TOKEN_TYPES.IMPORT_DEFAULT_SPECIFIER],
  EXPORT: [TOKEN_TYPES.EXPORT_NAMED_DECLARATION, TOKEN_TYPES.EXPORT_DEFAULT_DECLARATION]
};
export var rebuildConfigForAbstractionLevel = function rebuildConfigForAbstractionLevel(level) {
  var definedLevels = [TOKEN_TYPES.PROGRAM],
      customLevels = [];
  [].concat(level).forEach(function (item) {
    if (typeof item === 'string') {
      return definedLevels.push(item);
    }

    if (Array.isArray(item)) {
      return definedLevels = definedLevels.concat(_toConsumableArray(item));
    }

    if (_typeof(item) === 'object') {
      definedLevels = definedLevels.concat(_toConsumableArray(item.defined || []));
      customLevels = customLevels.concat(_toConsumableArray(item.custom || []));
    }
  });
  return DefinitionsList.filter(function (item) {
    return definedLevels.indexOf(item.type) !== -1;
  }).concat(customLevels);
};