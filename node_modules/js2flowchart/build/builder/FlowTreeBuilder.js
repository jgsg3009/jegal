function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import traverse from '@babel/traverse';
import { DefinitionsList } from './entryDefinitionsMap';
import { parseCodeToAST, buildVisitor } from './astBuilder';
import { ABSTRACTION_LEVELS, rebuildConfigForAbstractionLevel } from './abstractionLevelsConfigurator';
import FlowTreeModifier from './FlowTreeModifier';
import { DEFINED_MODIFIERS, MODIFIER_PRESETS, destructionModifier, expressionCallbacksModifier, arrowFunctionReturnModifier } from './modifiers/modifiersFactory';
import { TOKEN_TYPES } from 'shared/constants';
import { logError } from 'shared/utils/logger';

var buildFlowTree = function buildFlowTree(astTree, astVisitorConfig) {
  var treeNodes = [];
  traverse(astTree, buildVisitor(astVisitorConfig, treeNodes));
  var root = treeNodes.length && treeNodes[0] || {};
  return root.type === TOKEN_TYPES.PROGRAM ? root : {
    name: 'Root',
    type: TOKEN_TYPES.PROGRAM,
    body: treeNodes
  };
}; //TODO: seems redundant abstraction, refactor


export var createFlowTreeModifier = function createFlowTreeModifier() {
  var modifiers = FlowTreeModifier();
  return {
    setModifier: function setModifier(modifier) {
      modifiers.addModifier(modifier);
    },
    registerNewModifier: function registerNewModifier(test, updates) {
      modifiers.create(test, updates);
    },
    destructNodeTree: function destructNodeTree(test, newNameFn) {
      this.setModifier(destructionModifier(test, newNameFn));
    },
    applyToFlowTree: function applyToFlowTree(flowTree) {
      modifiers.applyTo(flowTree);
      return flowTree;
    }
  };
};
export default (function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$astParser = _ref.astParser,
      astParser = _ref$astParser === void 0 ? {} : _ref$astParser,
      _ref$astVisitor = _ref.astVisitor,
      astVisitor = _ref$astVisitor === void 0 ? {} : _ref$astVisitor;

  var astParserConfig = _objectSpread({}, astParser);

  var astVisitorConfig = _objectSpread({
    definitionsMap: _toConsumableArray(DefinitionsList),
    globalIgnore: null
  }, astVisitor);

  var defaultModifier = createFlowTreeModifier();
  defaultModifier.setModifier(expressionCallbacksModifier());
  defaultModifier.setModifier(arrowFunctionReturnModifier());
  return {
    setAbstractionLevel: function setAbstractionLevel(level) {
      astVisitorConfig.definitionsMap = rebuildConfigForAbstractionLevel(level);
    },
    resetAbstractionLevelToNormal: function resetAbstractionLevelToNormal() {
      astVisitorConfig.definitionsMap = _toConsumableArray(DefinitionsList);
    },
    setIgnoreFilter: function setIgnoreFilter(fn) {
      astVisitorConfig.globalIgnore = fn;
    },
    build: function build(code) {
      var ast = this.buildAst(code);
      return this.buildFlowTreeFromAst(ast);
    },
    buildAst: function buildAst(code) {
      return parseCodeToAST(code, astParserConfig);
    },
    buildFlowTreeFromAst: function buildFlowTreeFromAst(ast) {
      var flowTree = [];

      try {
        flowTree = buildFlowTree(ast, astVisitorConfig);
        defaultModifier.applyToFlowTree(flowTree);
      } catch (e) {
        logError('Error at buildFlowTreeFromAst' + e.message, e.stack);
        throw e;
      }

      return flowTree;
    }
  };
});
export { DEFINED_MODIFIERS, MODIFIER_PRESETS, ABSTRACTION_LEVELS };