function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { TOKEN_TYPES } from 'shared/constants';
import { callExpressionConverter } from 'builder/converters/core';
import { DefinitionsMap } from 'builder/entryDefinitionsMap';
import { getCustomFunctionDeclaration } from 'builder/abstraction-levels/functions';

var isNodeContainsFunctionCall = function isNodeContainsFunctionCall(node) {
  return node && node.type === TOKEN_TYPES.CALL_EXPRESSION;
};

var getCustomAssignmentExpression = function getCustomAssignmentExpression() {
  var assignmentExpression = DefinitionsMap[TOKEN_TYPES.ASSIGNMENT_EXPRESSION];
  return _objectSpread({}, assignmentExpression, {
    getName: function getName(_ref) {
      var node = _ref.node;
      return callExpressionConverter({
        node: node.right
      });
    },
    ignore: function ignore(path) {
      return assignmentExpression.ignore(path) || !isNodeContainsFunctionCall(path.node.right);
    }
  });
};

var getCustomVariableDeclarator = function getCustomVariableDeclarator() {
  var variableDeclarator = DefinitionsMap[TOKEN_TYPES.VARIABLE_DECLARATOR];
  return _objectSpread({}, variableDeclarator, {
    getName: function getName(_ref2) {
      var node = _ref2.node;
      return callExpressionConverter({
        node: node.init
      });
    },
    ignore: function ignore(path) {
      return variableDeclarator.ignore(path) || !isNodeContainsFunctionCall(path.node.init);
    }
  });
};

export var getFunctionDependenciesLevel = function getFunctionDependenciesLevel() {
  return {
    defined: [TOKEN_TYPES.CALL_EXPRESSION],
    custom: [getCustomFunctionDeclaration(), getCustomAssignmentExpression(), getCustomVariableDeclarator()]
  };
};