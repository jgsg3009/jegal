function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { getRoundedRectangle, getLine, getClosedPath } from 'shared/utils/svgPrimitives';
import { assignState } from 'shared/utils/composition';
import { addOffsetToPoints } from 'shared/utils/geometry';
import { setupBasicBehaviour, setupInitialProperties, setupInitialSelectors, calculateHeight, calculateNameBasedWidth, calculatePosition, delegateInit } from './BaseShape';
var ENTITY_FIELD_NAME = 'ReturnStatement';

var setupReturnStatementBehaviour = function setupReturnStatementBehaviour(state) {
  return {
    print: function print(config) {
      var theme = state.theme,
          arrowTheme = theme.arrow;
      var _state$position = state.position,
          x = _state$position.x,
          y = _state$position.y,
          h = state.dimensions.h,
          w = state.dimensions.w - arrowTheme.handlerLength - arrowTheme.sizeX,
          namePosition = {
        x: x,
        y: y
      }; //TODO: refactor

      var arrowSize = {
        x: arrowTheme.sizeX,
        y: arrowTheme.sizeY
      };
      var arrow = getClosedPath(addOffsetToPoints([{
        x: 0,
        y: 0
      }, {
        x: arrowSize.x,
        y: arrowSize.y / 2
      }, {
        x: 0,
        y: arrowSize.y
      }], {
        x: x + w + arrowTheme.handlerLength,
        y: y + h / 2 - arrowSize.y / 2
      }), arrowTheme);
      return "\n            <g>\n                ".concat(getRoundedRectangle(x, y, w, h, theme), "\n                \n                ").concat(getLine(x + w, y + h / 2 - arrowTheme.handlerLength, x + w + arrowTheme.handlerLength, y + h / 2 - arrowTheme.handlerLength, arrowTheme), "\n                \n                ").concat(getLine(x + w, y + h / 2 + arrowTheme.handlerLength, x + w + arrowTheme.handlerLength, y + h / 2 + arrowTheme.handlerLength, arrowTheme), "\n\n                ").concat(arrow, "\n                             \n                ").concat(this.printName(namePosition), "\n                ").concat(this.printDebugInfo(config), "\n            </g>");
    }
  };
};

var calculateWidth = function calculateWidth(state) {
  var theme = state.theme,
      arrowTheme = theme.arrow;
  return 2 * theme.horizontalPadding + arrowTheme.handlerLength + arrowTheme.sizeX + calculateNameBasedWidth(state);
};

var calculateDimensions = function calculateDimensions(state) {
  return {
    w: calculateWidth(state),
    h: calculateHeight(state)
  };
};

var extractBasicState = function extractBasicState(state) {
  return _objectSpread({}, state, {
    position: calculatePosition(state),
    dimensions: calculateDimensions(state)
  });
};

export var ReturnStatement = function ReturnStatement(initialState) {
  var state = extractBasicState(initialState);
  state = _objectSpread({}, state, {}, setupInitialProperties(state));
  return assignState(state, [setupInitialSelectors, setupBasicBehaviour, setupReturnStatementBehaviour]);
};
export default delegateInit(ReturnStatement, ENTITY_FIELD_NAME);