<<<<<<< HEAD
var TYPE = require('../../tokenizer').TYPE;
var rawMode = require('./Raw').mode;
=======
var List = require('../../utils/list');
var TYPE = require('../../tokenizer').TYPE;
>>>>>>> 99ef3b4711c8dcd2f717e43dd012712d1f333361

var WHITESPACE = TYPE.WhiteSpace;
var COMMENT = TYPE.Comment;
var SEMICOLON = TYPE.Semicolon;

function consumeRaw(startToken) {
<<<<<<< HEAD
    return this.Raw(startToken, rawMode.semicolonIncluded, true);
=======
    return this.Raw(startToken, 0, SEMICOLON, true, true);
>>>>>>> 99ef3b4711c8dcd2f717e43dd012712d1f333361
}

module.exports = {
    name: 'DeclarationList',
    structure: {
<<<<<<< HEAD
        children: [[
            'Declaration'
        ]]
    },
    parse: function() {
        var children = this.createList();
=======
        children: [['Declaration']]
    },
    parse: function() {
        var children = new List();
>>>>>>> 99ef3b4711c8dcd2f717e43dd012712d1f333361

        scan:
        while (!this.scanner.eof) {
            switch (this.scanner.tokenType) {
                case WHITESPACE:
                case COMMENT:
                case SEMICOLON:
                    this.scanner.next();
                    break;

                default:
<<<<<<< HEAD
                    children.push(this.parseWithFallback(this.Declaration, consumeRaw));
=======
                    children.appendData(this.tolerantParse(this.Declaration, consumeRaw));
>>>>>>> 99ef3b4711c8dcd2f717e43dd012712d1f333361
            }
        }

        return {
            type: 'DeclarationList',
            loc: this.getLocationFromList(children),
            children: children
        };
    },
<<<<<<< HEAD
    generate: function(node) {
        this.children(node, function(prev) {
            if (prev.type === 'Declaration') {
                this.chunk(';');
            }
        });
=======
    generate: function(processChunk, node) {
        this.each(processChunk, node);
>>>>>>> 99ef3b4711c8dcd2f717e43dd012712d1f333361
    }
};
