function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { TOKEN_TYPES } from 'shared/constants';
import { DefinitionsMap } from 'builder/entryDefinitionsMap';
export var getCustomFunctionDeclaration = function getCustomFunctionDeclaration() {
  var functionDeclaration = DefinitionsMap[TOKEN_TYPES.FUNCTION];
  return _objectSpread({}, functionDeclaration, {
    getName: function getName(path) {
      var nameConfig = functionDeclaration.getName(path);

      if (path.parent.type === TOKEN_TYPES.OBJECT_PROPERTY && path.parent.key) {
        nameConfig = _objectSpread({}, nameConfig, {
          name: path.parent.key.name + ': ' + nameConfig.name
        });
      }

      return nameConfig;
    },
    ignore: function ignore(path) {
      return functionDeclaration.ignore && functionDeclaration.ignore(path) || path.parent.type === TOKEN_TYPES.CALL_EXPRESSION;
    }
  });
};
export var getFunctionsLevel = function getFunctionsLevel() {
  return {
    defined: [],
    custom: [getCustomFunctionDeclaration()]
  };
};