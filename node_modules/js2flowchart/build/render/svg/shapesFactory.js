function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { ARROW_TYPE } from 'shared/constants';
import { getShapeForNode } from './shapesDefinitionsMap';
import ConnectionArrow, { getFieldName as getConnectionArrowFieldName } from './connections/ConnectionArrow';
export var createShapeForNode = function createShapeForNode(node, position, styleTheme) {
  var shape = getShapeForNode(node),
      shapeStyle = styleTheme[shape.getThemeFieldName()];
  return shape(node, position, shapeStyle);
};
export var createRootCircle = function createRootCircle(node, styleTheme) {
  var shape = getShapeForNode(node),
      shapeStyle = styleTheme[shape.getThemeFieldName()];

  var _styleTheme$RootStart = _objectSpread({}, styleTheme.RootStartPoint),
      center = _styleTheme$RootStart.center,
      childOffset = _styleTheme$RootStart.childOffset;

  var root = shape(node, center, shapeStyle);
  root.setChildOffsetPoint(childOffset);
  return root;
};
export var createConnectionArrow = function createConnectionArrow(config, styleTheme) {
  var connectionArrowStyle = styleTheme[getConnectionArrowFieldName()],
      arrowConfig = getConnectionConfig(config, connectionArrowStyle);
  return ConnectionArrow(_objectSpread({}, config, {}, arrowConfig), connectionArrowStyle);
};
export var getConnectionConfig = function getConnectionConfig(_ref, theme) {
  var startPoint = _ref.startPoint,
      endPoint = _ref.endPoint,
      boundaryPoint = _ref.boundaryPoint,
      arrowType = _ref.arrowType;
  var config = {
    linePoints: [],
    arrowPoint: {
      x: endPoint.x,
      y: endPoint.y
    }
  };

  switch (arrowType) {
    case ARROW_TYPE.RIGHT:
      config.linePoints = [{
        x: startPoint.x,
        y: startPoint.y
      }];

      if (boundaryPoint) {
        config.linePoints = config.linePoints.concat([{
          x: boundaryPoint.x,
          y: startPoint.y
        }, {
          x: boundaryPoint.x,
          y: endPoint.y
        }, {
          x: endPoint.x,
          y: endPoint.y
        }]);
      } else {
        config.linePoints = config.linePoints.concat([{
          x: startPoint.x,
          y: endPoint.y
        }, {
          x: endPoint.x,
          y: endPoint.y
        }]);
      }

      break;

    case ARROW_TYPE.LEFT:
      config.linePoints = [{
        x: startPoint.x,
        y: startPoint.y
      }, {
        x: boundaryPoint.x + theme.lineTurnOffset,
        y: startPoint.y
      }, {
        x: boundaryPoint.x + theme.lineTurnOffset,
        y: endPoint.y
      }, {
        x: endPoint.x - theme.lineTurnOffset,
        y: endPoint.y
      }];
      break;

    case ARROW_TYPE.DOWN:
      config.linePoints = [{
        x: startPoint.x,
        y: startPoint.y
      }, {
        x: boundaryPoint.x + theme.lineTurnOffset,
        y: startPoint.y
      }, {
        x: boundaryPoint.x + theme.lineTurnOffset,
        y: endPoint.y - theme.lineTurnOffset
      }, {
        x: endPoint.x,
        y: endPoint.y - theme.lineTurnOffset
      }, {
        x: endPoint.x,
        y: endPoint.y
      }];
      break;
  }

  return config;
};