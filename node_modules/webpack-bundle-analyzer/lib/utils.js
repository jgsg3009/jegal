<<<<<<< HEAD
"use strict";

const {
  inspect
} = require('util');

const _ = require('lodash');

const MONTHS = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
exports.createAssetsFilter = createAssetsFilter;

function createAssetsFilter(excludePatterns) {
  const excludeFunctions = _(excludePatterns).castArray().compact().map(pattern => {
    if (typeof pattern === 'string') {
      pattern = new RegExp(pattern, 'u');
    }

    if (_.isRegExp(pattern)) {
      return asset => pattern.test(asset);
    }

    if (!_.isFunction(pattern)) {
      throw new TypeError(`Pattern should be either string, RegExp or a function, but "${inspect(pattern, {
        depth: 0
      })}" got.`);
=======
'use strict';

var _require = require('util'),
    inspect = _require.inspect;

var _ = require('lodash');

exports.createAssetsFilter = createAssetsFilter;

function createAssetsFilter(excludePatterns) {
  var excludeFunctions = _(excludePatterns).castArray().compact().map(function (pattern) {
    if (typeof pattern === 'string') {
      pattern = new RegExp(pattern);
    }

    if (_.isRegExp(pattern)) {
      return function (asset) {
        return pattern.test(asset);
      };
    }

    if (!_.isFunction(pattern)) {
      throw new TypeError(`Pattern should be either string, RegExp or a function, but "${inspect(pattern, { depth: 0 })}" got.`);
>>>>>>> 99ef3b4711c8dcd2f717e43dd012712d1f333361
    }

    return pattern;
  }).value();

  if (excludeFunctions.length) {
<<<<<<< HEAD
    return asset => _.every(excludeFunctions, fn => fn(asset) !== true);
  } else {
    return () => true;
  }
}
/**
 * @desc get string of current time
 * format: dd/MMM HH:mm
 * */


exports.getCurrentTime = function () {
  const time = new Date();
  const year = time.getFullYear();
  const month = MONTHS[time.getMonth()];
  const day = time.getDate();
  const hour = `0${time.getHours()}`.slice(-2);
  const minute = `0${time.getMinutes()}`.slice(-2);
  return `${day} ${month} ${year} at ${hour}:${minute}`;
};
=======
    return function (asset) {
      return _.every(excludeFunctions, function (fn) {
        return fn(asset) !== true;
      });
    };
  } else {
    return function () {
      return true;
    };
  }
}
>>>>>>> 99ef3b4711c8dcd2f717e43dd012712d1f333361
