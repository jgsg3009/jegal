function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

import merge from 'deepmerge';
export var assignState = function assignState(state, extensionsList) {
  return Object.assign.apply(null, [{
    state: state
  }].concat(_toConsumableArray(extensionsList.map(function (fn) {
    return fn(state);
  }))));
};
export var mergeObjectStructures = function mergeObjectStructures(destination, source) {
  return merge(destination, source);
};