var _LoopMarksMap;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { getRhombus, getRoundedRectangle, getText } from 'shared/utils/svgPrimitives';
import { assignState } from 'shared/utils/composition';
import { TOKEN_TYPES } from 'shared/constants';
import { setupBasicBehaviour, setupInitialSelectors, calculateToPoint, calculateBackPoint, calculateBoundaries, delegateInit } from './BaseShape';
import { calculateDimensions, calculateFromPoint, calculateChildOffsetPoint } from './Rhombus';
var ENTITY_FIELD_NAME = 'LoopRhombus';
var LoopMarksMap = (_LoopMarksMap = {}, _defineProperty(_LoopMarksMap, TOKEN_TYPES.FOR_OF_STATEMENT, 'for'), _defineProperty(_LoopMarksMap, TOKEN_TYPES.FOR_IN_STATEMENT, 'for'), _defineProperty(_LoopMarksMap, TOKEN_TYPES.FOR_STATEMENT, 'for'), _defineProperty(_LoopMarksMap, TOKEN_TYPES.WHILE_STATEMENT, 'while'), _defineProperty(_LoopMarksMap, TOKEN_TYPES.DO_WHILE_STATEMENT, 'while'), _LoopMarksMap);

var calculateMidPoint = function calculateMidPoint(_ref) {
  var position = _ref.position,
      dimensions = _ref.dimensions;
  return {
    x: position.x + dimensions.h / 2,
    y: position.y
  };
};

var setupInitialProperties = function setupInitialProperties(state) {
  return {
    fromPoint: calculateFromPoint(state),
    childOffsetPoint: calculateChildOffsetPoint(state),
    toPoint: calculateToPoint(state),
    backPoint: calculateBackPoint(state),
    boundaries: calculateBoundaries(state),
    midPoint: calculateMidPoint(state)
  };
};

var setupAdditionalSelectors = function setupAdditionalSelectors(state) {
  return {
    getMidPoint: function getMidPoint() {
      return state.midPoint;
    },
    getLoopedConnectionArrow: function getLoopedConnectionArrow() {
      return state.loopedConnectionArrow;
    }
  };
};

var setupLoopRhombusBehavior = function setupLoopRhombusBehavior(state) {
  return {
    assignLoopedConnectionArrow: function assignLoopedConnectionArrow(loopedConnectionArrow) {
      state.loopedConnectionArrow = loopedConnectionArrow;
    },
    printConditionMarks: function printConditionMarks() {
      var theme = state.theme;
      var _state$position = state.position,
          x = _state$position.x,
          y = _state$position.y,
          R = state.dimensions.h,
          text = state.prefixName || LoopMarksMap[state.node.subType] || 'for';
      return getText(x + R / 2 - text.length * theme.symbolWidth / 2, y + R / 2 + theme.symbolHeight / 2, theme, text);
    },
    print: function print(config) {
      var theme = state.theme;
      var _state$position2 = state.position,
          x = _state$position2.x,
          y = _state$position2.y,
          _state$dimensions = state.dimensions,
          w = _state$dimensions.w,
          h = _state$dimensions.h;
      var R = h,
          rH = h - 2 * theme.thinPartOffset;
      var namePosition = {
        x: x + R,
        y: y + rH / 2
      };
      return "<g>\n\n            ".concat(getRoundedRectangle(x + h / 2, y + h / 4, w - R / 2, rH, theme), "\n            ").concat(getRhombus(x, y, R, R, theme), "\n                \n            ").concat(this.printName(namePosition), "\n            ").concat(this.printDebugInfo(config), "\n            ").concat(this.printConditionMarks(), "\n        </g>");
    }
  };
};

var calculatePosition = function calculatePosition(_ref2) {
  var initialPosition = _ref2.initialPosition,
      theme = _ref2.theme;
  return {
    x: initialPosition.x,
    y: initialPosition.y + theme.positionTopShift
  };
};

var extractBasicState = function extractBasicState(state) {
  return _objectSpread({}, state, {
    position: calculatePosition(state),
    dimensions: calculateDimensions(state)
  });
};

export var LoopRhombus = function LoopRhombus(initialState) {
  var state = extractBasicState(initialState);
  state = _objectSpread({}, state, {}, setupInitialProperties(state));
  return assignState(state, [setupInitialSelectors, setupAdditionalSelectors, setupBasicBehaviour, setupLoopRhombusBehavior]);
};
export default delegateInit(LoopRhombus, ENTITY_FIELD_NAME);